import { Client, LocalAuth, Message } from 'whatsapp-web.js';
import QRCode from 'qrcode';
import { Ollama } from 'ollama';

interface BotConfig {
  studioName: string;
  ownerName: string;
  phone: string;
  address: string;
  instagram: string;
  appointmentTemplate: string;
  reminderTemplate: string;
  quoteTemplate: string;
}

interface ConversationContext {
  stage: 'initial' | 'collecting_info' | 'completed';
  data: {
    idea?: string;
    size?: string;
    location?: string;
    style?: string;
    date?: string;
  };
}

export class WhatsAppBot {
  private client: Client;
  private config: BotConfig;
  private conversations: Map<string, ConversationContext> = new Map();
  private ollama: Ollama;
  private onQRCode?: (qr: string) => void;

  constructor(config: BotConfig, onQRCode?: (qr: string) => void) {
    this.config = config;
    this.onQRCode = onQRCode;
    this.ollama = new Ollama({ host: 'http://localhost:11434' });
    this.client = new Client({
      authStrategy: new LocalAuth({
        clientId: 'inkflow-bot'
      }),
      puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      }
    });

    this.setupEventHandlers();
  }

  private setupEventHandlers() {
    this.client.on('qr', (qr) => {
      console.log('üîó QR Code gerado!');
      
      // Se h√° callback, chama ele (para interface web)
      if (this.onQRCode) {
        this.onQRCode(qr);
      } else {
        // Fallback: mostra no console
        console.log('Acesse WhatsApp Web para escanear o QR Code');
        console.log('QR Data:', qr);
      }
    });

    this.client.on('ready', () => {
      console.log('ü§ñ Bot WhatsApp conectado e pronto!');
    });

    this.client.on('message', async (message) => {
      if (message.fromMe) return; // Ignora mensagens pr√≥prias
      
      try {
        await this.handleMessage(message);
      } catch (error) {
        console.error('Erro ao processar mensagem:', error);
        await message.reply('‚ùå Ops! Algo deu errado. Tente novamente em alguns instantes.');
      }
    });

    this.client.on('disconnected', (reason) => {
      console.log('‚ùå Bot desconectado:', reason);
    });
  }

  private async handleMessage(message: Message) {
    const contact = await message.getContact();
    const userId = contact.id.user;
    const messageText = message.body.toLowerCase().trim();

    // Ignorar mensagens de grupos
    if (message.from.includes('@g.us')) return;

    console.log(`üì± Mensagem de ${contact.name || contact.pushname}: ${message.body}`);

    // Comandos r√°pidos
    if (await this.handleQuickCommands(message, messageText)) {
      return;
    }

    // Sistema de conversa inteligente
    await this.handleConversation(message, userId, messageText);
  }

  private async handleQuickCommands(message: Message, text: string): Promise<boolean> {
    // Pre√ßos
    if (text.includes('pre√ßo') || text.includes('valor') || text.includes('custo')) {
      await message.reply(`üí∞ *TABELA DE PRE√áOS*

üé® *Tatuagens:*
‚Ä¢ Pequena (at√© 5cm): R$ 150 - R$ 250
‚Ä¢ M√©dia (5-15cm): R$ 300 - R$ 600
‚Ä¢ Grande (15cm+): R$ 700+

‚è±Ô∏è *Sess√µes:*
‚Ä¢ 1¬™ hora: R$ 200
‚Ä¢ Horas adicionais: R$ 150/h

üìù Para or√ßamento personalizado, me conte:
‚Ä¢ Sua ideia
‚Ä¢ Tamanho desejado
‚Ä¢ Local no corpo

Responda que eu fa√ßo seu or√ßamento! üòä`);
      return true;
    }

    // Hor√°rios
    if (text.includes('hor√°rio') || text.includes('agenda') || text.includes('dispon√≠vel')) {
      await message.reply(`üìÖ *HOR√ÅRIOS DISPON√çVEIS*

üóìÔ∏è *Esta semana:*
‚Ä¢ Segunda: 14h √†s 18h
‚Ä¢ Ter√ßa: 09h √†s 17h
‚Ä¢ Quarta: 14h √†s 18h
‚Ä¢ Quinta: 09h √†s 17h
‚Ä¢ Sexta: 09h √†s 16h

üì± Para agendar, me diga:
‚Ä¢ Que tipo de tatuagem
‚Ä¢ Tamanho aproximado
‚Ä¢ Sua prefer√™ncia de dia/hor√°rio

Vou verificar a disponibilidade! üé®`);
      return true;
    }

    // Localiza√ß√£o
    if (text.includes('endere√ßo') || text.includes('local') || text.includes('onde')) {
      await message.reply(`üìç *NOSSO EST√öDIO*

üè¢ ${this.config.studioName}
üìÆ ${this.config.address}

üöó *Como chegar:*
‚Ä¢ Metr√¥ mais pr√≥ximo: [Esta√ß√£o]
‚Ä¢ √înibus: Linhas [n√∫meros]
‚Ä¢ Uber/99: Deixe no endere√ßo acima

üì± Qualquer d√∫vida, √© s√≥ chamar! üòä`);
      return true;
    }

    // Portfolio
    if (text.includes('portf√≥lio') || text.includes('portfolio') || text.includes('trabalho')) {
      await message.reply(`üé® *NOSSO PORTF√ìLIO*

üì∏ Confira nossos trabalhos:
‚Ä¢ Instagram: ${this.config.instagram}

‚ú® *Especialidades:*
‚Ä¢ Fineline e delicadas
‚Ä¢ Realismo
‚Ä¢ Coloridas
‚Ä¢ Lettering
‚Ä¢ Geom√©tricas

Que estilo te interessa? üòä`);
      return true;
    }

    return false;
  }

  private async handleConversation(message: Message, userId: string, text: string) {
    let context = this.conversations.get(userId) || {
      stage: 'initial',
      data: {}
    };

    // Sauda√ß√µes e in√≠cio de conversa
    if (text.includes('oi') || text.includes('ol√°') || text.includes('bom dia') || 
        text.includes('boa tarde') || text.includes('boa noite') || context.stage === 'initial') {
      
      if (text.includes('agendar') || text.includes('tatuagem') || text.includes('or√ßamento')) {
        context.stage = 'collecting_info';
        this.conversations.set(userId, context);
        
        // Usar template configur√°vel ou fallback
        const appointmentMessage = this.config.appointmentTemplate && this.config.appointmentTemplate.trim() !== ''
          ? this.config.appointmentTemplate
          : `Ol√°! üòä Que legal que quer fazer uma tatuagem! üé®

Para eu preparar seu or√ßamento personalizado, me conta:

1Ô∏è‚É£ *Qual sua ideia?* (desenho, frase, s√≠mbolo...)
2Ô∏è‚É£ *Tamanho aproximado?* (ex: 5cm, tamanho da m√£o...)
3Ô∏è‚É£ *Onde no corpo?* (bra√ßo, perna, costas...)
4Ô∏è‚É£ *Que estilo prefere?* (fineline, colorida, realismo...)

Pode mandar tudo de uma vez ou ir respondendo aos poucos! üìù`;

        await message.reply(appointmentMessage);
        return;
      }
    }

    // Coleta de informa√ß√µes para or√ßamento
    if (context.stage === 'collecting_info') {
      await this.collectTattooInfo(message, context, text);
      this.conversations.set(userId, context);
      return;
    }

    // IA para conversas gerais
    await this.handleWithAI(message, text);
  }

  private async collectTattooInfo(message: Message, context: ConversationContext, text: string) {
    // Detecta informa√ß√µes na mensagem
    const info = context.data;
    let updates = 0;

    // Detecta ideia/conceito
    if (!info.idea && (text.includes('desenho') || text.includes('frase') || text.includes('s√≠mbolo') || 
        text.includes('nome') || text.includes('animal') || text.includes('flor'))) {
      info.idea = text;
      updates++;
    }

    // Detecta tamanho
    if (!info.size && (text.includes('cm') || text.includes('pequen') || text.includes('grand') || 
        text.includes('m√©di') || text.includes('m√£o') || text.includes('bra√ßo'))) {
      info.size = text;
      updates++;
    }

    // Detecta localiza√ß√£o
    if (!info.location && (text.includes('bra√ßo') || text.includes('perna') || text.includes('costa') || 
        text.includes('pesco√ßo') || text.includes('m√£o') || text.includes('p√©'))) {
      info.location = text;
      updates++;
    }

    // Detecta estilo
    if (!info.style && (text.includes('fineline') || text.includes('colorid') || text.includes('realismo') || 
        text.includes('geom√©tric') || text.includes('letter') || text.includes('aquarel'))) {
      info.style = text;
      updates++;
    }

    // Verifica se tem informa√ß√µes suficientes
    const hasEnoughInfo = info.idea && info.size && info.location;

    if (hasEnoughInfo) {
      // Gera or√ßamento
      const quote = await this.generateQuote(info);
      await message.reply(quote);
      
      await message.reply(`‚úÖ Gostou do or√ßamento? 

Para agendar, responda:
‚Ä¢ Que dia prefere?
‚Ä¢ Per√≠odo: manh√£ ou tarde?

üì± Ou me chama para tirar d√∫vidas! üòä`);
      
      context.stage = 'completed';
    } else if (updates > 0) {
      // Pede informa√ß√µes que ainda faltam
      const missing = [];
      if (!info.idea) missing.push('sua ideia');
      if (!info.size) missing.push('o tamanho');
      if (!info.location) missing.push('onde no corpo');
      
      await message.reply(`Perfeito! üëç Anotei aqui.

Ainda preciso saber: ${missing.join(', ')}.

Pode mandar! üìù`);
    } else {
      // N√£o conseguiu extrair info, usa IA
      await this.handleWithAI(message, text);
    }
  }

  private async generateQuote(info: any): Promise<string> {
    // L√≥gica simples de precifica√ß√£o
    let basePrice = 200;
    let timeEstimate = '2-3 horas';

    // Ajusta pre√ßo por tamanho
    if (info.size.includes('pequen') || info.size.includes('5cm')) {
      basePrice = 150;
      timeEstimate = '1-2 horas';
    } else if (info.size.includes('grand') || info.size.includes('20cm')) {
      basePrice = 400;
      timeEstimate = '4-6 horas';
    }

    // Ajusta por complexidade
    if (info.style?.includes('realismo') || info.style?.includes('colorid')) {
      basePrice += 100;
      timeEstimate = '3-5 horas';
    }

    // Usar o template configur√°vel se dispon√≠vel
    if (this.config.quoteTemplate && this.config.quoteTemplate.trim() !== '') {
      return this.config.quoteTemplate
        .replace('{tamanho}', info.size || 'M√©dio')
        .replace('{estilo}', info.style || 'Tradicional')
        .replace('{local}', info.location || 'Conforme escolhido')
        .replace('{tempo}', timeEstimate)
        .replace('{valor}', basePrice.toString())
        .replace('{ideia}', info.idea || 'Conforme descrito');
    }

    // Template padr√£o como fallback
    return `üíâ *OR√áAMENTO PERSONALIZADO* üíâ

üé® *Sua tatuagem:*
‚Ä¢ Ideia: ${info.idea || 'Conforme descrito'}
‚Ä¢ Tamanho: ${info.size || 'M√©dio'}
‚Ä¢ Local: ${info.location || 'Conforme escolhido'}
‚Ä¢ Estilo: ${info.style || 'Tradicional'}

‚è±Ô∏è *Tempo estimado:* ${timeEstimate}
üí∞ *Valor:* R$ ${basePrice}

‚ú® *Incluso:*
‚Ä¢ Desenho personalizado
‚Ä¢ Materiais esterilizados
‚Ä¢ Acompanhamento p√≥s-tatuagem

üì± *Para agendar:* Me diga sua prefer√™ncia de data! üóìÔ∏è`;
  }

  private async handleWithAI(message: Message, text: string) {
    try {
      const systemPrompt = `Voc√™ √© o assistente do est√∫dio de tatuagem ${this.config.studioName}, do tatuador ${this.config.ownerName}.

Informa√ß√µes do est√∫dio:
- Nome: ${this.config.studioName}
- Endere√ßo: ${this.config.address}
- Instagram: ${this.config.instagram}

Seu papel:
- Seja amig√°vel, profissional e entusiasmado com tatuagens
- Responda d√∫vidas sobre tatuagens, cuidados, pre√ßos
- Sempre incentive o cliente a agendar
- Use emojis moderadamente
- Mantenha respostas concisas (m√°ximo 200 caracteres)
- Se n√£o souber algo espec√≠fico, pe√ßa para entrar em contato diretamente

Contexto: Cliente enviou "${text}"`;

      const response = await this.ollama.chat({
        model: 'llama3.2:1b', // Modelo leve e gratuito
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text }
        ],
        options: {
          temperature: 0.7,
          top_p: 0.9
        }
      });

      const aiResponse = response.message.content.trim();
      
      // Limita tamanho da resposta
      const finalResponse = aiResponse.length > 500 ? 
        aiResponse.substring(0, 497) + '...' : aiResponse;

      await message.reply(finalResponse);
      
    } catch (error) {
      console.error('Erro na IA:', error);
      
      // Fallback para resposta padr√£o
      await message.reply(`Oi! üòä Sou o assistente do ${this.config.studioName}!

Para or√ßamentos, diga: "quero fazer uma tatuagem"
Para hor√°rios: "quais os hor√°rios dispon√≠veis"
Para pre√ßos: "quanto custa uma tatuagem"

Como posso te ajudar? üé®`);
    }
  }

  public async start() {
    console.log('üöÄ Iniciando bot WhatsApp...');
    await this.client.initialize();
  }

  public async stop() {
    console.log('üõë Parando bot WhatsApp...');
    await this.client.destroy();
  }

  public updateConfig(newConfig: Partial<BotConfig>) {
    this.config = { ...this.config, ...newConfig };
  }

  public setQRCallback(callback: (qr: string) => void) {
    this.onQRCode = callback;
  }
}
